// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v3.21.12
// source: health.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Heartbeat message
type Heartbeat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ClusterId      string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeId         string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Incarnation    uint64                 `protobuf:"varint,3,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	Hlc            uint64                 `protobuf:"varint,4,opt,name=hlc,proto3" json:"hlc,omitempty"` // Hybrid logical clock
	Seq            uint64                 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"` // Sequence number
	PeersConnected uint32                 `protobuf:"varint,6,opt,name=peers_connected,json=peersConnected,proto3" json:"peers_connected,omitempty"`
	Load           *Load                  `protobuf:"bytes,7,opt,name=load,proto3" json:"load,omitempty"`
	Digest         []byte                 `protobuf:"bytes,8,opt,name=digest,proto3" json:"digest,omitempty"`       // Phonebook hash for anti-entropy
	Signature      []byte                 `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"` // Signature using libp2p identity
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_health_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0}
}

func (x *Heartbeat) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Heartbeat) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Heartbeat) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

func (x *Heartbeat) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *Heartbeat) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Heartbeat) GetPeersConnected() uint32 {
	if x != nil {
		return x.PeersConnected
	}
	return 0
}

func (x *Heartbeat) GetLoad() *Load {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *Heartbeat) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *Heartbeat) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Load struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cpu           float32                `protobuf:"fixed32,1,opt,name=cpu,proto3" json:"cpu,omitempty"`       // 0.0-1.0 CPU utilization
	Memory        float32                `protobuf:"fixed32,2,opt,name=memory,proto3" json:"memory,omitempty"` // 0.0-1.0 memory utilization
	Conns         uint32                 `protobuf:"varint,3,opt,name=conns,proto3" json:"conns,omitempty"`    // Number of active connections
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Load) Reset() {
	*x = Load{}
	mi := &file_health_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Load) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Load) ProtoMessage() {}

func (x *Load) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Load.ProtoReflect.Descriptor instead.
func (*Load) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{1}
}

func (x *Load) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Load) GetMemory() float32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Load) GetConns() uint32 {
	if x != nil {
		return x.Conns
	}
	return 0
}

// Suspicion message
type Suspicion struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ClusterId          string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TargetNodeId       string                 `protobuf:"bytes,2,opt,name=target_node_id,json=targetNodeId,proto3" json:"target_node_id,omitempty"`
	AccuserNodeId      string                 `protobuf:"bytes,3,opt,name=accuser_node_id,json=accuserNodeId,proto3" json:"accuser_node_id,omitempty"`
	AccuserIncarnation uint64                 `protobuf:"varint,4,opt,name=accuser_incarnation,json=accuserIncarnation,proto3" json:"accuser_incarnation,omitempty"`
	Hlc                uint64                 `protobuf:"varint,5,opt,name=hlc,proto3" json:"hlc,omitempty"`
	Phi                float32                `protobuf:"fixed32,6,opt,name=phi,proto3" json:"phi,omitempty"`           // Current suspicion level
	Witnesses          []*Witness             `protobuf:"bytes,7,rep,name=witnesses,proto3" json:"witnesses,omitempty"` // Optional indirect probe results
	Signature          []byte                 `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"` // Signature using libp2p identity
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Suspicion) Reset() {
	*x = Suspicion{}
	mi := &file_health_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Suspicion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suspicion) ProtoMessage() {}

func (x *Suspicion) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suspicion.ProtoReflect.Descriptor instead.
func (*Suspicion) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{2}
}

func (x *Suspicion) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Suspicion) GetTargetNodeId() string {
	if x != nil {
		return x.TargetNodeId
	}
	return ""
}

func (x *Suspicion) GetAccuserNodeId() string {
	if x != nil {
		return x.AccuserNodeId
	}
	return ""
}

func (x *Suspicion) GetAccuserIncarnation() uint64 {
	if x != nil {
		return x.AccuserIncarnation
	}
	return 0
}

func (x *Suspicion) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *Suspicion) GetPhi() float32 {
	if x != nil {
		return x.Phi
	}
	return 0
}

func (x *Suspicion) GetWitnesses() []*Witness {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

func (x *Suspicion) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Witness struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Hlc           uint64                 `protobuf:"varint,2,opt,name=hlc,proto3" json:"hlc,omitempty"`
	ProbeResult   bool                   `protobuf:"varint,3,opt,name=probe_result,json=probeResult,proto3" json:"probe_result,omitempty"`
	Signature     []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Witness) Reset() {
	*x = Witness{}
	mi := &file_health_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Witness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Witness) ProtoMessage() {}

func (x *Witness) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Witness.ProtoReflect.Descriptor instead.
func (*Witness) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{3}
}

func (x *Witness) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Witness) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *Witness) GetProbeResult() bool {
	if x != nil {
		return x.ProbeResult
	}
	return false
}

func (x *Witness) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Refutation message
type Refutation struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ClusterId         string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TargetNodeId      string                 `protobuf:"bytes,2,opt,name=target_node_id,json=targetNodeId,proto3" json:"target_node_id,omitempty"`
	RefuterNodeId     string                 `protobuf:"bytes,3,opt,name=refuter_node_id,json=refuterNodeId,proto3" json:"refuter_node_id,omitempty"`
	TargetIncarnation uint64                 `protobuf:"varint,4,opt,name=target_incarnation,json=targetIncarnation,proto3" json:"target_incarnation,omitempty"`
	Hlc               uint64                 `protobuf:"varint,5,opt,name=hlc,proto3" json:"hlc,omitempty"`
	RecentAck         []byte                 `protobuf:"bytes,6,opt,name=recent_ack,json=recentAck,proto3" json:"recent_ack,omitempty"` // Proof of communication
	Signature         []byte                 `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`                  // Signature using libp2p identity
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Refutation) Reset() {
	*x = Refutation{}
	mi := &file_health_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Refutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refutation) ProtoMessage() {}

func (x *Refutation) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refutation.ProtoReflect.Descriptor instead.
func (*Refutation) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{4}
}

func (x *Refutation) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Refutation) GetTargetNodeId() string {
	if x != nil {
		return x.TargetNodeId
	}
	return ""
}

func (x *Refutation) GetRefuterNodeId() string {
	if x != nil {
		return x.RefuterNodeId
	}
	return ""
}

func (x *Refutation) GetTargetIncarnation() uint64 {
	if x != nil {
		return x.TargetIncarnation
	}
	return 0
}

func (x *Refutation) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *Refutation) GetRecentAck() []byte {
	if x != nil {
		return x.RecentAck
	}
	return nil
}

func (x *Refutation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Quorum verdict message
type QuorumVerdict struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ClusterId         string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TargetNodeId      string                 `protobuf:"bytes,2,opt,name=target_node_id,json=targetNodeId,proto3" json:"target_node_id,omitempty"`
	Verdict           string                 `protobuf:"bytes,3,opt,name=verdict,proto3" json:"verdict,omitempty"` // "failed", etc.
	Hlc               uint64                 `protobuf:"varint,4,opt,name=hlc,proto3" json:"hlc,omitempty"`
	TargetIncarnation uint64                 `protobuf:"varint,5,opt,name=target_incarnation,json=targetIncarnation,proto3" json:"target_incarnation,omitempty"`
	AccuserIds        []string               `protobuf:"bytes,6,rep,name=accuser_ids,json=accuserIds,proto3" json:"accuser_ids,omitempty"`
	AccuserZones      []string               `protobuf:"bytes,7,rep,name=accuser_zones,json=accuserZones,proto3" json:"accuser_zones,omitempty"`
	AccuserSigs       [][]byte               `protobuf:"bytes,8,rep,name=accuser_sigs,json=accuserSigs,proto3" json:"accuser_sigs,omitempty"`
	QuorumAggSig      []byte                 `protobuf:"bytes,9,opt,name=quorum_agg_sig,json=quorumAggSig,proto3" json:"quorum_agg_sig,omitempty"` // Aggregate signature
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QuorumVerdict) Reset() {
	*x = QuorumVerdict{}
	mi := &file_health_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuorumVerdict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumVerdict) ProtoMessage() {}

func (x *QuorumVerdict) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumVerdict.ProtoReflect.Descriptor instead.
func (*QuorumVerdict) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{5}
}

func (x *QuorumVerdict) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *QuorumVerdict) GetTargetNodeId() string {
	if x != nil {
		return x.TargetNodeId
	}
	return ""
}

func (x *QuorumVerdict) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

func (x *QuorumVerdict) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *QuorumVerdict) GetTargetIncarnation() uint64 {
	if x != nil {
		return x.TargetIncarnation
	}
	return 0
}

func (x *QuorumVerdict) GetAccuserIds() []string {
	if x != nil {
		return x.AccuserIds
	}
	return nil
}

func (x *QuorumVerdict) GetAccuserZones() []string {
	if x != nil {
		return x.AccuserZones
	}
	return nil
}

func (x *QuorumVerdict) GetAccuserSigs() [][]byte {
	if x != nil {
		return x.AccuserSigs
	}
	return nil
}

func (x *QuorumVerdict) GetQuorumAggSig() []byte {
	if x != nil {
		return x.QuorumAggSig
	}
	return nil
}

// Failure announcement message
type FailureAnnouncement struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ClusterId         string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TargetNodeId      string                 `protobuf:"bytes,2,opt,name=target_node_id,json=targetNodeId,proto3" json:"target_node_id,omitempty"`
	Hlc               uint64                 `protobuf:"varint,3,opt,name=hlc,proto3" json:"hlc,omitempty"`
	TargetIncarnation uint64                 `protobuf:"varint,4,opt,name=target_incarnation,json=targetIncarnation,proto3" json:"target_incarnation,omitempty"`
	QuorumRef         []byte                 `protobuf:"bytes,5,opt,name=quorum_ref,json=quorumRef,proto3" json:"quorum_ref,omitempty"`          // Hash/pointer to QuorumVerdict
	AnnouncerSig      []byte                 `protobuf:"bytes,6,opt,name=announcer_sig,json=announcerSig,proto3" json:"announcer_sig,omitempty"` // Signature using libp2p identity
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FailureAnnouncement) Reset() {
	*x = FailureAnnouncement{}
	mi := &file_health_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailureAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureAnnouncement) ProtoMessage() {}

func (x *FailureAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureAnnouncement.ProtoReflect.Descriptor instead.
func (*FailureAnnouncement) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{6}
}

func (x *FailureAnnouncement) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FailureAnnouncement) GetTargetNodeId() string {
	if x != nil {
		return x.TargetNodeId
	}
	return ""
}

func (x *FailureAnnouncement) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *FailureAnnouncement) GetTargetIncarnation() uint64 {
	if x != nil {
		return x.TargetIncarnation
	}
	return 0
}

func (x *FailureAnnouncement) GetQuorumRef() []byte {
	if x != nil {
		return x.QuorumRef
	}
	return nil
}

func (x *FailureAnnouncement) GetAnnouncerSig() []byte {
	if x != nil {
		return x.AnnouncerSig
	}
	return nil
}

// Ping request and response for SWIM probing
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Nonce         []byte                 `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Hlc           uint64                 `protobuf:"varint,4,opt,name=hlc,proto3" json:"hlc,omitempty"`
	Signature     []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_health_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{7}
}

func (x *PingRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PingRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PingRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *PingRequest) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *PingRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Nonce         []byte                 `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"` // Echo of request nonce
	Hlc           uint64                 `protobuf:"varint,4,opt,name=hlc,proto3" json:"hlc,omitempty"`
	Signature     []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_health_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{8}
}

func (x *PingResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PingResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PingResponse) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *PingResponse) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *PingResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Indirect probe request
type IndirectProbeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ClusterId       string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	RequesterNodeId string                 `protobuf:"bytes,2,opt,name=requester_node_id,json=requesterNodeId,proto3" json:"requester_node_id,omitempty"`
	TargetNodeId    string                 `protobuf:"bytes,3,opt,name=target_node_id,json=targetNodeId,proto3" json:"target_node_id,omitempty"`
	Nonce           []byte                 `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Hlc             uint64                 `protobuf:"varint,5,opt,name=hlc,proto3" json:"hlc,omitempty"`
	Signature       []byte                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IndirectProbeRequest) Reset() {
	*x = IndirectProbeRequest{}
	mi := &file_health_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndirectProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndirectProbeRequest) ProtoMessage() {}

func (x *IndirectProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndirectProbeRequest.ProtoReflect.Descriptor instead.
func (*IndirectProbeRequest) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{9}
}

func (x *IndirectProbeRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *IndirectProbeRequest) GetRequesterNodeId() string {
	if x != nil {
		return x.RequesterNodeId
	}
	return ""
}

func (x *IndirectProbeRequest) GetTargetNodeId() string {
	if x != nil {
		return x.TargetNodeId
	}
	return ""
}

func (x *IndirectProbeRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *IndirectProbeRequest) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *IndirectProbeRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type IndirectProbeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ProberNodeId  string                 `protobuf:"bytes,2,opt,name=prober_node_id,json=proberNodeId,proto3" json:"prober_node_id,omitempty"`
	TargetNodeId  string                 `protobuf:"bytes,3,opt,name=target_node_id,json=targetNodeId,proto3" json:"target_node_id,omitempty"`
	ProbeResult   bool                   `protobuf:"varint,4,opt,name=probe_result,json=probeResult,proto3" json:"probe_result,omitempty"`
	Hlc           uint64                 `protobuf:"varint,5,opt,name=hlc,proto3" json:"hlc,omitempty"`
	Signature     []byte                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndirectProbeResponse) Reset() {
	*x = IndirectProbeResponse{}
	mi := &file_health_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndirectProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndirectProbeResponse) ProtoMessage() {}

func (x *IndirectProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndirectProbeResponse.ProtoReflect.Descriptor instead.
func (*IndirectProbeResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{10}
}

func (x *IndirectProbeResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *IndirectProbeResponse) GetProberNodeId() string {
	if x != nil {
		return x.ProberNodeId
	}
	return ""
}

func (x *IndirectProbeResponse) GetTargetNodeId() string {
	if x != nil {
		return x.TargetNodeId
	}
	return ""
}

func (x *IndirectProbeResponse) GetProbeResult() bool {
	if x != nil {
		return x.ProbeResult
	}
	return false
}

func (x *IndirectProbeResponse) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *IndirectProbeResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_health_proto protoreflect.FileDescriptor

const file_health_proto_rawDesc = "" +
	"\n" +
	"\fhealth.proto\x12\ffalak.health\"\x90\x02\n" +
	"\tHeartbeat\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x17\n" +
	"\anode_id\x18\x02 \x01(\tR\x06nodeId\x12 \n" +
	"\vincarnation\x18\x03 \x01(\x04R\vincarnation\x12\x10\n" +
	"\x03hlc\x18\x04 \x01(\x04R\x03hlc\x12\x10\n" +
	"\x03seq\x18\x05 \x01(\x04R\x03seq\x12'\n" +
	"\x0fpeers_connected\x18\x06 \x01(\rR\x0epeersConnected\x12&\n" +
	"\x04load\x18\a \x01(\v2\x12.falak.health.LoadR\x04load\x12\x16\n" +
	"\x06digest\x18\b \x01(\fR\x06digest\x12\x1c\n" +
	"\tsignature\x18\t \x01(\fR\tsignature\"F\n" +
	"\x04Load\x12\x10\n" +
	"\x03cpu\x18\x01 \x01(\x02R\x03cpu\x12\x16\n" +
	"\x06memory\x18\x02 \x01(\x02R\x06memory\x12\x14\n" +
	"\x05conns\x18\x03 \x01(\rR\x05conns\"\xa0\x02\n" +
	"\tSuspicion\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12$\n" +
	"\x0etarget_node_id\x18\x02 \x01(\tR\ftargetNodeId\x12&\n" +
	"\x0faccuser_node_id\x18\x03 \x01(\tR\raccuserNodeId\x12/\n" +
	"\x13accuser_incarnation\x18\x04 \x01(\x04R\x12accuserIncarnation\x12\x10\n" +
	"\x03hlc\x18\x05 \x01(\x04R\x03hlc\x12\x10\n" +
	"\x03phi\x18\x06 \x01(\x02R\x03phi\x123\n" +
	"\twitnesses\x18\a \x03(\v2\x15.falak.health.WitnessR\twitnesses\x12\x1c\n" +
	"\tsignature\x18\b \x01(\fR\tsignature\"u\n" +
	"\aWitness\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x10\n" +
	"\x03hlc\x18\x02 \x01(\x04R\x03hlc\x12!\n" +
	"\fprobe_result\x18\x03 \x01(\bR\vprobeResult\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\"\xf7\x01\n" +
	"\n" +
	"Refutation\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12$\n" +
	"\x0etarget_node_id\x18\x02 \x01(\tR\ftargetNodeId\x12&\n" +
	"\x0frefuter_node_id\x18\x03 \x01(\tR\rrefuterNodeId\x12-\n" +
	"\x12target_incarnation\x18\x04 \x01(\x04R\x11targetIncarnation\x12\x10\n" +
	"\x03hlc\x18\x05 \x01(\x04R\x03hlc\x12\x1d\n" +
	"\n" +
	"recent_ack\x18\x06 \x01(\fR\trecentAck\x12\x1c\n" +
	"\tsignature\x18\a \x01(\fR\tsignature\"\xbe\x02\n" +
	"\rQuorumVerdict\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12$\n" +
	"\x0etarget_node_id\x18\x02 \x01(\tR\ftargetNodeId\x12\x18\n" +
	"\averdict\x18\x03 \x01(\tR\averdict\x12\x10\n" +
	"\x03hlc\x18\x04 \x01(\x04R\x03hlc\x12-\n" +
	"\x12target_incarnation\x18\x05 \x01(\x04R\x11targetIncarnation\x12\x1f\n" +
	"\vaccuser_ids\x18\x06 \x03(\tR\n" +
	"accuserIds\x12#\n" +
	"\raccuser_zones\x18\a \x03(\tR\faccuserZones\x12!\n" +
	"\faccuser_sigs\x18\b \x03(\fR\vaccuserSigs\x12$\n" +
	"\x0equorum_agg_sig\x18\t \x01(\fR\fquorumAggSig\"\xdf\x01\n" +
	"\x13FailureAnnouncement\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12$\n" +
	"\x0etarget_node_id\x18\x02 \x01(\tR\ftargetNodeId\x12\x10\n" +
	"\x03hlc\x18\x03 \x01(\x04R\x03hlc\x12-\n" +
	"\x12target_incarnation\x18\x04 \x01(\x04R\x11targetIncarnation\x12\x1d\n" +
	"\n" +
	"quorum_ref\x18\x05 \x01(\fR\tquorumRef\x12#\n" +
	"\rannouncer_sig\x18\x06 \x01(\fR\fannouncerSig\"\x8b\x01\n" +
	"\vPingRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x17\n" +
	"\anode_id\x18\x02 \x01(\tR\x06nodeId\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\fR\x05nonce\x12\x10\n" +
	"\x03hlc\x18\x04 \x01(\x04R\x03hlc\x12\x1c\n" +
	"\tsignature\x18\x05 \x01(\fR\tsignature\"\x8c\x01\n" +
	"\fPingResponse\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x17\n" +
	"\anode_id\x18\x02 \x01(\tR\x06nodeId\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\fR\x05nonce\x12\x10\n" +
	"\x03hlc\x18\x04 \x01(\x04R\x03hlc\x12\x1c\n" +
	"\tsignature\x18\x05 \x01(\fR\tsignature\"\xcd\x01\n" +
	"\x14IndirectProbeRequest\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12*\n" +
	"\x11requester_node_id\x18\x02 \x01(\tR\x0frequesterNodeId\x12$\n" +
	"\x0etarget_node_id\x18\x03 \x01(\tR\ftargetNodeId\x12\x14\n" +
	"\x05nonce\x18\x04 \x01(\fR\x05nonce\x12\x10\n" +
	"\x03hlc\x18\x05 \x01(\x04R\x03hlc\x12\x1c\n" +
	"\tsignature\x18\x06 \x01(\fR\tsignature\"\xd5\x01\n" +
	"\x15IndirectProbeResponse\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12$\n" +
	"\x0eprober_node_id\x18\x02 \x01(\tR\fproberNodeId\x12$\n" +
	"\x0etarget_node_id\x18\x03 \x01(\tR\ftargetNodeId\x12!\n" +
	"\fprobe_result\x18\x04 \x01(\bR\vprobeResult\x12\x10\n" +
	"\x03hlc\x18\x05 \x01(\x04R\x03hlc\x12\x1c\n" +
	"\tsignature\x18\x06 \x01(\fR\tsignatureB;Z9github.com/tareksalem/falak/internal/node/protobuf/modelsb\x06proto3"

var (
	file_health_proto_rawDescOnce sync.Once
	file_health_proto_rawDescData []byte
)

func file_health_proto_rawDescGZIP() []byte {
	file_health_proto_rawDescOnce.Do(func() {
		file_health_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_health_proto_rawDesc), len(file_health_proto_rawDesc)))
	})
	return file_health_proto_rawDescData
}

var file_health_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_health_proto_goTypes = []any{
	(*Heartbeat)(nil),             // 0: falak.health.Heartbeat
	(*Load)(nil),                  // 1: falak.health.Load
	(*Suspicion)(nil),             // 2: falak.health.Suspicion
	(*Witness)(nil),               // 3: falak.health.Witness
	(*Refutation)(nil),            // 4: falak.health.Refutation
	(*QuorumVerdict)(nil),         // 5: falak.health.QuorumVerdict
	(*FailureAnnouncement)(nil),   // 6: falak.health.FailureAnnouncement
	(*PingRequest)(nil),           // 7: falak.health.PingRequest
	(*PingResponse)(nil),          // 8: falak.health.PingResponse
	(*IndirectProbeRequest)(nil),  // 9: falak.health.IndirectProbeRequest
	(*IndirectProbeResponse)(nil), // 10: falak.health.IndirectProbeResponse
}
var file_health_proto_depIdxs = []int32{
	1, // 0: falak.health.Heartbeat.load:type_name -> falak.health.Load
	3, // 1: falak.health.Suspicion.witnesses:type_name -> falak.health.Witness
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_health_proto_init() }
func file_health_proto_init() {
	if File_health_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_health_proto_rawDesc), len(file_health_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_health_proto_goTypes,
		DependencyIndexes: file_health_proto_depIdxs,
		MessageInfos:      file_health_proto_msgTypes,
	}.Build()
	File_health_proto = out.File
	file_health_proto_goTypes = nil
	file_health_proto_depIdxs = nil
}
