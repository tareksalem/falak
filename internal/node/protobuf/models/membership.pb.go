// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v3.21.12
// source: membership.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Envelope for all membership messages with verification data
type MembershipMessage struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	NodeId    string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // Sender node ID
	Timestamp int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // Message timestamp
	Signature []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`         // Signature of the serialized event
	// Types that are valid to be assigned to Event:
	//
	//	*MembershipMessage_NodeJoined
	//	*MembershipMessage_NodeLeft
	//	*MembershipMessage_NodeUpdate
	Event         isMembershipMessage_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MembershipMessage) Reset() {
	*x = MembershipMessage{}
	mi := &file_membership_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembershipMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipMessage) ProtoMessage() {}

func (x *MembershipMessage) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipMessage.ProtoReflect.Descriptor instead.
func (*MembershipMessage) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{0}
}

func (x *MembershipMessage) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *MembershipMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MembershipMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *MembershipMessage) GetEvent() isMembershipMessage_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *MembershipMessage) GetNodeJoined() *NodeJoined {
	if x != nil {
		if x, ok := x.Event.(*MembershipMessage_NodeJoined); ok {
			return x.NodeJoined
		}
	}
	return nil
}

func (x *MembershipMessage) GetNodeLeft() *NodeLeft {
	if x != nil {
		if x, ok := x.Event.(*MembershipMessage_NodeLeft); ok {
			return x.NodeLeft
		}
	}
	return nil
}

func (x *MembershipMessage) GetNodeUpdate() *NodeUpdate {
	if x != nil {
		if x, ok := x.Event.(*MembershipMessage_NodeUpdate); ok {
			return x.NodeUpdate
		}
	}
	return nil
}

type isMembershipMessage_Event interface {
	isMembershipMessage_Event()
}

type MembershipMessage_NodeJoined struct {
	NodeJoined *NodeJoined `protobuf:"bytes,4,opt,name=node_joined,json=nodeJoined,proto3,oneof"`
}

type MembershipMessage_NodeLeft struct {
	NodeLeft *NodeLeft `protobuf:"bytes,5,opt,name=node_left,json=nodeLeft,proto3,oneof"`
}

type MembershipMessage_NodeUpdate struct {
	NodeUpdate *NodeUpdate `protobuf:"bytes,6,opt,name=node_update,json=nodeUpdate,proto3,oneof"`
}

func (*MembershipMessage_NodeJoined) isMembershipMessage_Event() {}

func (*MembershipMessage_NodeLeft) isMembershipMessage_Event() {}

func (*MembershipMessage_NodeUpdate) isMembershipMessage_Event() {}

// Event when a node successfully joins the cluster
type NodeJoined struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peer          *PeerInfo              `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`                                  // Information about the joining peer
	ConnectedTo   []string               `protobuf:"bytes,2,rep,name=connected_to,json=connectedTo,proto3" json:"connected_to,omitempty"` // Node IDs this node is connected to
	Incarnation   uint64                 `protobuf:"varint,3,opt,name=incarnation,proto3" json:"incarnation,omitempty"`                   // Node incarnation number
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeJoined) Reset() {
	*x = NodeJoined{}
	mi := &file_membership_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeJoined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeJoined) ProtoMessage() {}

func (x *NodeJoined) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeJoined.ProtoReflect.Descriptor instead.
func (*NodeJoined) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{1}
}

func (x *NodeJoined) GetPeer() *PeerInfo {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *NodeJoined) GetConnectedTo() []string {
	if x != nil {
		return x.ConnectedTo
	}
	return nil
}

func (x *NodeJoined) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

// Event when a node gracefully leaves the cluster
type NodeLeft struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // ID of the leaving node
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`               // Reason for leaving (shutdown, maintenance, etc.)
	Incarnation   uint64                 `protobuf:"varint,3,opt,name=incarnation,proto3" json:"incarnation,omitempty"`    // Node incarnation number
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeLeft) Reset() {
	*x = NodeLeft{}
	mi := &file_membership_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLeft) ProtoMessage() {}

func (x *NodeLeft) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLeft.ProtoReflect.Descriptor instead.
func (*NodeLeft) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{2}
}

func (x *NodeLeft) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeLeft) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *NodeLeft) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

// Event when a node's status or capabilities change
type NodeUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                                                                                                // ID of the updated node
	UpdatedLabels map[string]string      `protobuf:"bytes,2,rep,name=updated_labels,json=updatedLabels,proto3" json:"updated_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // New or changed labels
	RemovedLabels []string               `protobuf:"bytes,3,rep,name=removed_labels,json=removedLabels,proto3" json:"removed_labels,omitempty"`                                                                           // Labels that were removed
	Status        NodeStatus             `protobuf:"varint,4,opt,name=status,proto3,enum=falak.auth.NodeStatus" json:"status,omitempty"`                                                                                  // Updated status if changed
	Incarnation   uint64                 `protobuf:"varint,5,opt,name=incarnation,proto3" json:"incarnation,omitempty"`                                                                                                   // Node incarnation number
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeUpdate) Reset() {
	*x = NodeUpdate{}
	mi := &file_membership_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeUpdate) ProtoMessage() {}

func (x *NodeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_membership_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeUpdate.ProtoReflect.Descriptor instead.
func (*NodeUpdate) Descriptor() ([]byte, []int) {
	return file_membership_proto_rawDescGZIP(), []int{3}
}

func (x *NodeUpdate) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeUpdate) GetUpdatedLabels() map[string]string {
	if x != nil {
		return x.UpdatedLabels
	}
	return nil
}

func (x *NodeUpdate) GetRemovedLabels() []string {
	if x != nil {
		return x.RemovedLabels
	}
	return nil
}

func (x *NodeUpdate) GetStatus() NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeStatus_UNKNOWN
}

func (x *NodeUpdate) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

var File_membership_proto protoreflect.FileDescriptor

const file_membership_proto_rawDesc = "" +
	"\n" +
	"\x10membership.proto\x12\x10falak.membership\x1a\n" +
	"auth.proto\"\xae\x02\n" +
	"\x11MembershipMessage\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\x12?\n" +
	"\vnode_joined\x18\x04 \x01(\v2\x1c.falak.membership.NodeJoinedH\x00R\n" +
	"nodeJoined\x129\n" +
	"\tnode_left\x18\x05 \x01(\v2\x1a.falak.membership.NodeLeftH\x00R\bnodeLeft\x12?\n" +
	"\vnode_update\x18\x06 \x01(\v2\x1c.falak.membership.NodeUpdateH\x00R\n" +
	"nodeUpdateB\a\n" +
	"\x05event\"{\n" +
	"\n" +
	"NodeJoined\x12(\n" +
	"\x04peer\x18\x01 \x01(\v2\x14.falak.auth.PeerInfoR\x04peer\x12!\n" +
	"\fconnected_to\x18\x02 \x03(\tR\vconnectedTo\x12 \n" +
	"\vincarnation\x18\x03 \x01(\x04R\vincarnation\"]\n" +
	"\bNodeLeft\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x12 \n" +
	"\vincarnation\x18\x03 \x01(\x04R\vincarnation\"\xb8\x02\n" +
	"\n" +
	"NodeUpdate\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12V\n" +
	"\x0eupdated_labels\x18\x02 \x03(\v2/.falak.membership.NodeUpdate.UpdatedLabelsEntryR\rupdatedLabels\x12%\n" +
	"\x0eremoved_labels\x18\x03 \x03(\tR\rremovedLabels\x12.\n" +
	"\x06status\x18\x04 \x01(\x0e2\x16.falak.auth.NodeStatusR\x06status\x12 \n" +
	"\vincarnation\x18\x05 \x01(\x04R\vincarnation\x1a@\n" +
	"\x12UpdatedLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B;Z9github.com/tareksalem/falak/internal/node/protobuf/modelsb\x06proto3"

var (
	file_membership_proto_rawDescOnce sync.Once
	file_membership_proto_rawDescData []byte
)

func file_membership_proto_rawDescGZIP() []byte {
	file_membership_proto_rawDescOnce.Do(func() {
		file_membership_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_membership_proto_rawDesc), len(file_membership_proto_rawDesc)))
	})
	return file_membership_proto_rawDescData
}

var file_membership_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_membership_proto_goTypes = []any{
	(*MembershipMessage)(nil), // 0: falak.membership.MembershipMessage
	(*NodeJoined)(nil),        // 1: falak.membership.NodeJoined
	(*NodeLeft)(nil),          // 2: falak.membership.NodeLeft
	(*NodeUpdate)(nil),        // 3: falak.membership.NodeUpdate
	nil,                       // 4: falak.membership.NodeUpdate.UpdatedLabelsEntry
	(*PeerInfo)(nil),          // 5: falak.auth.PeerInfo
	(NodeStatus)(0),           // 6: falak.auth.NodeStatus
}
var file_membership_proto_depIdxs = []int32{
	1, // 0: falak.membership.MembershipMessage.node_joined:type_name -> falak.membership.NodeJoined
	2, // 1: falak.membership.MembershipMessage.node_left:type_name -> falak.membership.NodeLeft
	3, // 2: falak.membership.MembershipMessage.node_update:type_name -> falak.membership.NodeUpdate
	5, // 3: falak.membership.NodeJoined.peer:type_name -> falak.auth.PeerInfo
	4, // 4: falak.membership.NodeUpdate.updated_labels:type_name -> falak.membership.NodeUpdate.UpdatedLabelsEntry
	6, // 5: falak.membership.NodeUpdate.status:type_name -> falak.auth.NodeStatus
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_membership_proto_init() }
func file_membership_proto_init() {
	if File_membership_proto != nil {
		return
	}
	file_auth_proto_init()
	file_membership_proto_msgTypes[0].OneofWrappers = []any{
		(*MembershipMessage_NodeJoined)(nil),
		(*MembershipMessage_NodeLeft)(nil),
		(*MembershipMessage_NodeUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_membership_proto_rawDesc), len(file_membership_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_membership_proto_goTypes,
		DependencyIndexes: file_membership_proto_depIdxs,
		MessageInfos:      file_membership_proto_msgTypes,
	}.Build()
	File_membership_proto = out.File
	file_membership_proto_goTypes = nil
	file_membership_proto_depIdxs = nil
}
